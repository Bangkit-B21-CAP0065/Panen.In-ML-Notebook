# -*- coding: utf-8 -*-
"""crop_predict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13vUk4jIfNnxBNb9Ve70lsO-rt8GL7Bs_
"""

# Use seaborn for pairplot
!pip install -q seaborn

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
import os

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.layers.experimental import preprocessing

folders = os.listdir(r'/content/drive/MyDrive/data cuaca untuk crop')
folders.sort()
print(folders)
kolom = ['Tn','Tx','Tavg','RH_avg','RR','ss','ff_x','ddd_x','ff_avg']
df_input = pd.DataFrame(columns = kolom)

for folder in folders :
  files = os.listdir(r'/content/drive/MyDrive/data cuaca untuk crop/'+folder)
  files.sort()
  for file in files :
    a = pd.read_excel(r'/content/drive/MyDrive/data cuaca untuk crop/'+folder+'/' + file,na_values = [8888,9999,"NaN"],header=8)
    a.dropna(axis=0,inplace=True)
    df_input = df_input.append({'Tn':a.mean()[0],'Tx':a.mean()[1],'Tavg':a.mean()[2],'RH_avg':a.mean()[3],'RR':a.mean()[4],
                  'ss':a.mean()[5],'ff_x':a.mean()[6],'ddd_x':a.mean()[7],'ff_avg':a.mean()[8]},ignore_index = True)
    
df_input = df_input.interpolate(method ='linear', limit_direction ='forward') 
ff_x = df_input.pop('ff_x')
ddd_x = df_input.pop('ddd_x')

wd_rad = ddd_x*np.pi / 180

df_input['ff_x'] = ff_x*np.cos(wd_rad)
df_input['ff_y'] = ff_x*np.sin(wd_rad)
 
df_input

df_rice = pd.DataFrame()

sheets = ['Kab.Bandung','Kab.Bogor','Kab.Majalengka','Kab.Sleman']

for sheet in enumerate(sheets) :
  a = pd.read_excel(r'/content/drive/MyDrive/Dataset crop/dataset_crop.xlsx',na_values = ["NaN"],usecols = [1],sheet_name = sheet[0])
  a.dropna(axis=0,inplace=True)
  df_rice = df_rice.append(a)

df_rice = df_rice.reset_index(drop=True)
df_input = df_input.join(df_rice['produksi/luas padi sawah'],how = 'left')
df_rice

df_corn = pd.DataFrame()

sheets = ['Kab.Bandung','Kab.Bogor','Kab.Majalengka','Kab.Sleman']

for sheet in enumerate(sheets) :
  a = pd.read_excel(r'/content/drive/MyDrive/Dataset crop/dataset_crop.xlsx',na_values = ["NaN"],usecols = [2],sheet_name = sheet[0])
  a.dropna(axis=0,inplace=True)
  df_corn = df_corn.append(a)

df_corn = df_corn.reset_index(drop=True)
df_input = df_input.join(df_corn['produksi/luas jagung'],how = 'left')
df_corn

train_dataset = df_input

train_input = train_dataset.copy()

train_labels_rice = train_input.pop('produksi/luas padi sawah')
train_labels_corn = train_input.pop('produksi/luas jagung')

train_input =  np.array(train_input)
train_labels_rice = np.array(train_labels_rice)
train_labels_corn = np.array(train_labels_corn)
print(train_input)
print(train_labels_rice)

normalizer = preprocessing.Normalization()
normalizer.adapt(train_input)

model_rice = keras.Sequential([
  normalizer,
  layers.Dense(64, activation='relu'),
  layers.Dense(16, activation='relu'),
  layers.Dense(8, activation='relu'),
  layers.Dense(1)
  ])

model_corn = keras.Sequential([
  normalizer,
  layers.Dense(64, activation='relu'),
  layers.Dense(16, activation='relu'),
  layers.Dense(8, activation='relu'),
  layers.Dense(1)
  ])


model_rice.compile(loss='mean_absolute_error',
                optimizer=tf.keras.optimizers.Adam(0.001))

model_corn.compile(loss='mean_absolute_error',
                optimizer=tf.keras.optimizers.Adam(0.001))

model_rice.summary()
model_rice.summary()

def plot_loss(history):
  plt.plot(history.history['loss'], label='loss')
  plt.plot(history.history['val_loss'], label='val_loss')
  plt.ylim([0, 100])
  plt.xlabel('Epoch')
  plt.ylabel('Error')
  plt.legend()
  plt.grid(True)

history_rice = model_rice.fit(
    train_input, train_labels_rice,
    validation_split=0.2,
    verbose=1, epochs=200)

plot_loss(history_rice)

history_corn = model_corn.fit(
    train_input, train_labels_corn,
    validation_split=0.2,
    verbose=1, epochs=150)

plot_loss(history_corn)

result_rice = model_rice.predict([[19.60908,30.021885,25.367077,78.33284,6.2988048,6.2865496,-0.3123911,-2.2975235,-0.69789666]])
result_corn = model_corn.predict([[19.60908,30.021885,25.367077,78.33284,6.2988048,6.2865496,-0.3123911,-2.2975235,-0.69789666]])
print(result_rice)
print(result_corn)